#!/bin/bash
# Daily Namespace Backup Script
# This script performs daily backups of the namespace and updates GitHub
# Auto-generated by backup-namespace-setup.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration (set during initial setup)
SOURCE_CLUSTER=""  # Will be detected from current context
SOURCE_NAMESPACE="balance-fit-prd"
GITHUB_REPO_URL="https://github.com/rich-p-ai/kohler-apps.git"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# Directories
BACKUP_DIR="backup"
GITOPS_DIR="gitops"
DAILY_DIR="$BACKUP_DIR/daily/$TIMESTAMP"

# Logging functions
print_section() {
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create daily backup directory
mkdir -p "$DAILY_DIR/raw"
mkdir -p "$DAILY_DIR/cleaned"

# Verify cluster access
print_section "CLUSTER VERIFICATION"
print_info "Verifying access to current OpenShift cluster"

# Check if we can connect to the cluster
if ! oc cluster-info &>/dev/null; then
    print_error "Cannot connect to OpenShift cluster"
    print_error "Please ensure you are logged in with: oc login <cluster-url> --token=<your-token>"
    exit 1
fi

# Get current cluster info
SOURCE_CLUSTER=$(oc config view --minify -o jsonpath='{.clusters[0].cluster.server}' 2>/dev/null)
current_user=$(oc whoami 2>/dev/null)

if [[ -z "$current_user" ]]; then
    print_error "Not authenticated to any OpenShift cluster"
    exit 1
fi

print_success "Connected to cluster as user: $current_user"
print_info "Using cluster: $SOURCE_CLUSTER"

# Verify namespace access
if ! oc get namespace "$SOURCE_NAMESPACE" &>/dev/null; then
    print_error "Cannot access namespace '$SOURCE_NAMESPACE'"
    exit 1
fi

print_success "Verified access to namespace: $SOURCE_NAMESPACE"

# Export current state
print_section "EXPORTING CURRENT NAMESPACE STATE"

resource_types=(
    "configmaps"
    "secrets"
    "services"
    "serviceaccounts"
    "deployments"
    "deploymentconfigs"
    "daemonsets"
    "statefulsets"
    "persistentvolumeclaims"
    "routes"
    "ingresses"
    "jobs"
    "cronjobs"
    "imagestreams"
    "buildconfigs"
    "networkpolicies"
    "resourcequotas"
    "limitranges"
    "rolebindings"
    "roles"
    "horizontalpodautoscalers"
)

for resource_type in "${resource_types[@]}"; do
    print_info "Exporting $resource_type..."
    
    if oc get "$resource_type" -n "$SOURCE_NAMESPACE" -o yaml > "$DAILY_DIR/raw/${resource_type}-all.yaml" 2>/dev/null; then
        # Clean the exported resources
        if command -v yq &> /dev/null; then
            yq eval '
                del(.metadata.uid) |
                del(.metadata.selfLink) |
                del(.metadata.resourceVersion) |
                del(.metadata.generation) |
                del(.metadata.creationTimestamp) |
                del(.metadata.deletionTimestamp) |
                del(.metadata.deletionGracePeriodSeconds) |
                del(.metadata.ownerReferences) |
                del(.metadata.finalizers) |
                del(.metadata.managedFields) |
                del(.status) |
                del(.spec.clusterIP) |
                del(.spec.clusterIPs) |
                del(.spec.nodeName) |
                del(.spec.serviceAccount) |
                del(.spec.hostIP) |
                del(.spec.podIP) |
                del(.spec.podIPs) |
                del(.spec.phase) |
                del(.spec.qosClass)
            ' "$DAILY_DIR/raw/${resource_type}-all.yaml" > "$DAILY_DIR/cleaned/${resource_type}.yaml" 2>/dev/null
        else
            # Basic cleaning with sed if yq is not available
            sed -e '/uid:/d' \
                -e '/selfLink:/d' \
                -e '/resourceVersion:/d' \
                -e '/generation:/d' \
                -e '/creationTimestamp:/d' \
                -e '/status:/d' \
                -e '/clusterIP:/d' \
                -e '/nodeName:/d' \
                "$DAILY_DIR/raw/${resource_type}-all.yaml" > "$DAILY_DIR/cleaned/${resource_type}.yaml"
        fi
    else
        print_info "No $resource_type found in namespace"
    fi
done

print_success "Export completed"

# Check for changes and update GitOps structure if needed
print_section "CHECKING FOR CHANGES"

changes_detected=false

for resource_type in "${resource_types[@]}"; do
    daily_file="$DAILY_DIR/cleaned/${resource_type}.yaml"
    gitops_file="$GITOPS_DIR/overlays/prd/${resource_type}.yaml"
    
    if [[ -f "$daily_file" ]] && [[ -s "$daily_file" ]]; then
        if [[ ! -f "$gitops_file" ]] || ! diff -q "$daily_file" "$gitops_file" &>/dev/null; then
            print_info "Changes detected in $resource_type"
            cp "$daily_file" "$gitops_file"
            changes_detected=true
            
            # Ensure resource is in kustomization.yaml
            if ! grep -q "- ${resource_type}.yaml" "$GITOPS_DIR/overlays/prd/kustomization.yaml"; then
                sed -i '/resources:/a - '"${resource_type}.yaml" "$GITOPS_DIR/overlays/prd/kustomization.yaml"
            fi
        fi
    elif [[ -f "$gitops_file" ]]; then
        print_info "Resource $resource_type no longer exists, removing from GitOps"
        rm -f "$gitops_file"
        sed -i "/- ${resource_type}.yaml/d" "$GITOPS_DIR/overlays/prd/kustomization.yaml"
        changes_detected=true
    fi
done

# Update timestamp in kustomization
sed -i "s/backup.kohlerco.com\/timestamp: .*/backup.kohlerco.com\/timestamp: \"$TIMESTAMP\"/" "$GITOPS_DIR/overlays/prd/kustomization.yaml"

if [[ "$changes_detected" == "true" ]]; then
    print_success "Changes detected and GitOps structure updated"
    
    # Commit and push changes
    print_section "COMMITTING CHANGES TO GITHUB"
    
    git add .
    git commit -m "Auto-backup: Update $SOURCE_NAMESPACE namespace - $TIMESTAMP

- Automated backup of namespace resources
- Timestamp: $TIMESTAMP
- Changes detected in namespace configuration
- Updated GitOps manifests for ArgoCD sync" || {
        print_warning "No changes to commit or commit failed"
    }
    
    git push origin main || {
        print_error "Failed to push to GitHub"
        exit 1
    }
    
    print_success "Changes pushed to GitHub successfully"
else
    print_info "No changes detected since last backup"
fi

# Generate backup summary
print_section "BACKUP SUMMARY"

cat > "$DAILY_DIR/backup-summary.md" << SUMMARY_EOF
# Daily Backup Summary - $TIMESTAMP

## Namespace: $SOURCE_NAMESPACE
## Date: $(date)
## Changes Detected: $changes_detected

## Resources Backed Up:
SUMMARY_EOF

for resource_type in "${resource_types[@]}"; do
    if [[ -f "$DAILY_DIR/cleaned/${resource_type}.yaml" ]] && [[ -s "$DAILY_DIR/cleaned/${resource_type}.yaml" ]]; then
        resource_count=$(yq eval '.items | length' "$DAILY_DIR/cleaned/${resource_type}.yaml" 2>/dev/null || echo "Unknown")
        echo "- $resource_type: $resource_count items" >> "$DAILY_DIR/backup-summary.md"
    fi
done

cat >> "$DAILY_DIR/backup-summary.md" << SUMMARY_EOF

## GitOps Status:
- Repository: $GITHUB_REPO_URL
- ArgoCD Application: $SOURCE_NAMESPACE-backup
- Target Namespace: $SOURCE_NAMESPACE

## Next Steps:
1. Verify ArgoCD sync status
2. Check application health in target cluster
3. Review any sync errors in ArgoCD UI

---
Generated by automated backup script
SUMMARY_EOF

print_success "Daily backup completed successfully"

if [[ "$changes_detected" == "true" ]]; then
    print_info "GitOps repository updated - ArgoCD will sync changes automatically"
else
    print_info "No changes detected - GitOps repository unchanged"
fi

